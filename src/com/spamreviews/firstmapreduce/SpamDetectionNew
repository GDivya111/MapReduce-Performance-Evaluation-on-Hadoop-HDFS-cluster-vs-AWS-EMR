package com.spamreviews.firstmapreduce;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;

public class SpamDetection {
	public static class Map extends Mapper<Object, Text, Text, FloatWritable> {
		public void map(Object key, Text value, OutputCollector<Text, FloatWritable> output, Reporter reporter) throws IOException {
			String line = value.toString();
			String[] tuple = line.split("\\n");
			for(int i = 0; i < tuple.length; i++) {
				JsonFactory factory = new JsonFactory();
				ObjectMapper mapper = new ObjectMapper(factory);
				JsonNode rootNode = mapper.readTree(tuple[i]);
				Text reviewer = new Text();
				FloatWritable val = new FloatWritable(0);
				String content = "";
				Iterator<Entry<String,JsonNode>> fieldsIterator = rootNode.fields();
				while (fieldsIterator.hasNext()) {
					Entry<String,JsonNode> field = fieldsIterator.next();
					if (field.getKey() == "reviewerID") {
						reviewer.set(field.getValue().toString());
					}
					if (field.getKey() == "helpful") {
						content = field.getValue().toString();
						Scanner in = new Scanner(content).useDelimiter("[^0-9]+");
						int v1;
						v1 = in.nextInt();
						int v2 = in.nextInt();
						if (v1 != 0 && v2 != 0) {
							float f = (float)v1/v2;
							val.set(f);
						}
					}
				}
				output.collect(reviewer, val);
			}
		}
	}
	
	public static class Reduce extends Reducer<Text, FloatWritable, Text, Text> {
		public void reduce(Text key, Iterator<FloatWritable> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException {
			float sum = 0;
			int count = 0;
			double threshold = 0.25;
			while (values.hasNext()) {
				sum += values.next().get();
				count++;
			}
			Text out = new Text();
			float res = (float)sum/count;
			if(res < threshold)
				out.set("Spam");
			else
				out.set("Genuine");
			output.collect(key, out);
		}
	}
	 
	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
	    Job job = Job.getInstance(conf, "spam detect");
	    job.setJarByClass(SpamDetection.class);
	    job.setMapperClass(Map.class);
	    job.setCombinerClass(Reduce.class);
	    job.setReducerClass(Reduce.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
	}
}
